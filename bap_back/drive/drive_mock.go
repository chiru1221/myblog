// Code generated by MockGen. DO NOT EDIT.
// Source: drive.go

// Package drive is a generated GoMock package.
package drive

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDrive is a mock of Drive interface.
type MockDrive struct {
	ctrl     *gomock.Controller
	recorder *MockDriveMockRecorder
}

// MockDriveMockRecorder is the mock recorder for MockDrive.
type MockDriveMockRecorder struct {
	mock *MockDrive
}

// NewMockDrive creates a new mock instance.
func NewMockDrive(ctrl *gomock.Controller) *MockDrive {
	mock := &MockDrive{ctrl: ctrl}
	mock.recorder = &MockDriveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrive) EXPECT() *MockDriveMockRecorder {
	return m.recorder
}

// Construct mocks base method.
func (m *MockDrive) Construct(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Construct", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Construct indicates an expected call of Construct.
func (mr *MockDriveMockRecorder) Construct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Construct", reflect.TypeOf((*MockDrive)(nil).Construct), ctx)
}

// Export mocks base method.
func (m *MockDrive) Export(fileId, mimeType string, ctx context.Context) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", fileId, mimeType, ctx)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockDriveMockRecorder) Export(fileId, mimeType, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockDrive)(nil).Export), fileId, mimeType, ctx)
}
