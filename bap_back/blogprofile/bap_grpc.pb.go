// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blogprofile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BapClient is the client API for Bap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BapClient interface {
	Blog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*BlogDetail, error)
	Blogs(ctx context.Context, in *NoId, opts ...grpc.CallOption) (*BlogList, error)
	Profile(ctx context.Context, in *NoId, opts ...grpc.CallOption) (*ProfileDetail, error)
}

type bapClient struct {
	cc grpc.ClientConnInterface
}

func NewBapClient(cc grpc.ClientConnInterface) BapClient {
	return &bapClient{cc}
}

func (c *bapClient) Blog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*BlogDetail, error) {
	out := new(BlogDetail)
	err := c.cc.Invoke(ctx, "/blogprofile.Bap/Blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bapClient) Blogs(ctx context.Context, in *NoId, opts ...grpc.CallOption) (*BlogList, error) {
	out := new(BlogList)
	err := c.cc.Invoke(ctx, "/blogprofile.Bap/Blogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bapClient) Profile(ctx context.Context, in *NoId, opts ...grpc.CallOption) (*ProfileDetail, error) {
	out := new(ProfileDetail)
	err := c.cc.Invoke(ctx, "/blogprofile.Bap/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BapServer is the server API for Bap service.
// All implementations must embed UnimplementedBapServer
// for forward compatibility
type BapServer interface {
	Blog(context.Context, *BlogId) (*BlogDetail, error)
	Blogs(context.Context, *NoId) (*BlogList, error)
	Profile(context.Context, *NoId) (*ProfileDetail, error)
	mustEmbedUnimplementedBapServer()
}

// UnimplementedBapServer must be embedded to have forward compatible implementations.
type UnimplementedBapServer struct {
}

func (UnimplementedBapServer) Blog(context.Context, *BlogId) (*BlogDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blog not implemented")
}
func (UnimplementedBapServer) Blogs(context.Context, *NoId) (*BlogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blogs not implemented")
}
func (UnimplementedBapServer) Profile(context.Context, *NoId) (*ProfileDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedBapServer) mustEmbedUnimplementedBapServer() {}

// UnsafeBapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BapServer will
// result in compilation errors.
type UnsafeBapServer interface {
	mustEmbedUnimplementedBapServer()
}

func RegisterBapServer(s grpc.ServiceRegistrar, srv BapServer) {
	s.RegisterService(&Bap_ServiceDesc, srv)
}

func _Bap_Blog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BapServer).Blog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogprofile.Bap/Blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BapServer).Blog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bap_Blogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BapServer).Blogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogprofile.Bap/Blogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BapServer).Blogs(ctx, req.(*NoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bap_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BapServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogprofile.Bap/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BapServer).Profile(ctx, req.(*NoId))
	}
	return interceptor(ctx, in, info, handler)
}

// Bap_ServiceDesc is the grpc.ServiceDesc for Bap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogprofile.Bap",
	HandlerType: (*BapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Blog",
			Handler:    _Bap_Blog_Handler,
		},
		{
			MethodName: "Blogs",
			Handler:    _Bap_Blogs_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _Bap_Profile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogprofile/bap.proto",
}
