// Code generated by MockGen. DO NOT EDIT.
// Source: mongodb.go

// Package mongodb is a generated GoMock package.
package mongodb

import (
	data "example.com/bap/util/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// ConstructDB mocks base method.
func (m *MockDB) ConstructDB(database, collection string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructDB", database, collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConstructDB indicates an expected call of ConstructDB.
func (mr *MockDBMockRecorder) ConstructDB(database, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructDB", reflect.TypeOf((*MockDB)(nil).ConstructDB), database, collection)
}

// DestructDB mocks base method.
func (m *MockDB) DestructDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestructDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// DestructDB indicates an expected call of DestructDB.
func (mr *MockDBMockRecorder) DestructDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestructDB", reflect.TypeOf((*MockDB)(nil).DestructDB))
}

// InsertBlog mocks base method.
func (m *MockDB) InsertBlog(blog *data.Blog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlog", blog)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlog indicates an expected call of InsertBlog.
func (mr *MockDBMockRecorder) InsertBlog(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlog", reflect.TypeOf((*MockDB)(nil).InsertBlog), blog)
}

// ReadBlog mocks base method.
func (m *MockDB) ReadBlog(id string) (*data.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBlog", id)
	ret0, _ := ret[0].(*data.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBlog indicates an expected call of ReadBlog.
func (mr *MockDBMockRecorder) ReadBlog(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlog", reflect.TypeOf((*MockDB)(nil).ReadBlog), id)
}

// ReadBlogs mocks base method.
func (m *MockDB) ReadBlogs() ([]data.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBlogs")
	ret0, _ := ret[0].([]data.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBlogs indicates an expected call of ReadBlogs.
func (mr *MockDBMockRecorder) ReadBlogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlogs", reflect.TypeOf((*MockDB)(nil).ReadBlogs))
}

// ReadProfile mocks base method.
func (m *MockDB) ReadProfile() (*data.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProfile")
	ret0, _ := ret[0].(*data.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProfile indicates an expected call of ReadProfile.
func (mr *MockDBMockRecorder) ReadProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProfile", reflect.TypeOf((*MockDB)(nil).ReadProfile))
}

// UpdateBlog mocks base method.
func (m *MockDB) UpdateBlog(blog *data.Blog, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", blog, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockDBMockRecorder) UpdateBlog(blog, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockDB)(nil).UpdateBlog), blog, id)
}
