// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	http "net/http"
	reflect "reflect"

	blogprofile "example.com/bap/blogprofile"
	data "example.com/bap/util/data"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Blog mocks base method.
func (m *MockService) Blog(id string) (*data.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blog", id)
	ret0, _ := ret[0].(*data.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blog indicates an expected call of Blog.
func (mr *MockServiceMockRecorder) Blog(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blog", reflect.TypeOf((*MockService)(nil).Blog), id)
}

// BlogMeta mocks base method.
func (m *MockService) BlogMeta(id string) (*data.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogMeta", id)
	ret0, _ := ret[0].(*data.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogMeta indicates an expected call of BlogMeta.
func (mr *MockServiceMockRecorder) BlogMeta(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogMeta", reflect.TypeOf((*MockService)(nil).BlogMeta), id)
}

// BlogOpenFilter mocks base method.
func (m *MockService) BlogOpenFilter(blog *data.Blog) *data.Blog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogOpenFilter", blog)
	ret0, _ := ret[0].(*data.Blog)
	return ret0
}

// BlogOpenFilter indicates an expected call of BlogOpenFilter.
func (mr *MockServiceMockRecorder) BlogOpenFilter(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogOpenFilter", reflect.TypeOf((*MockService)(nil).BlogOpenFilter), blog)
}

// BlogToBlogDetail mocks base method.
func (m *MockService) BlogToBlogDetail(blog *data.Blog) *blogprofile.BlogDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogToBlogDetail", blog)
	ret0, _ := ret[0].(*blogprofile.BlogDetail)
	return ret0
}

// BlogToBlogDetail indicates an expected call of BlogToBlogDetail.
func (mr *MockServiceMockRecorder) BlogToBlogDetail(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogToBlogDetail", reflect.TypeOf((*MockService)(nil).BlogToBlogDetail), blog)
}

// Blogs mocks base method.
func (m *MockService) Blogs() ([]data.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blogs")
	ret0, _ := ret[0].([]data.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blogs indicates an expected call of Blogs.
func (mr *MockServiceMockRecorder) Blogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blogs", reflect.TypeOf((*MockService)(nil).Blogs))
}

// BlogsArticleMask mocks base method.
func (m *MockService) BlogsArticleMask(blogs []data.Blog) []data.Blog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogsArticleMask", blogs)
	ret0, _ := ret[0].([]data.Blog)
	return ret0
}

// BlogsArticleMask indicates an expected call of BlogsArticleMask.
func (mr *MockServiceMockRecorder) BlogsArticleMask(blogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogsArticleMask", reflect.TypeOf((*MockService)(nil).BlogsArticleMask), blogs)
}

// BlogsOpenFilter mocks base method.
func (m *MockService) BlogsOpenFilter(blogs []data.Blog) []data.Blog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogsOpenFilter", blogs)
	ret0, _ := ret[0].([]data.Blog)
	return ret0
}

// BlogsOpenFilter indicates an expected call of BlogsOpenFilter.
func (mr *MockServiceMockRecorder) BlogsOpenFilter(blogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogsOpenFilter", reflect.TypeOf((*MockService)(nil).BlogsOpenFilter), blogs)
}

// BlogsToBlogList mocks base method.
func (m *MockService) BlogsToBlogList(blogs []data.Blog) *blogprofile.BlogList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogsToBlogList", blogs)
	ret0, _ := ret[0].(*blogprofile.BlogList)
	return ret0
}

// BlogsToBlogList indicates an expected call of BlogsToBlogList.
func (mr *MockServiceMockRecorder) BlogsToBlogList(blogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogsToBlogList", reflect.TypeOf((*MockService)(nil).BlogsToBlogList), blogs)
}

// ConstructDB mocks base method.
func (m *MockService) ConstructDB(database string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructDB", database)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConstructDB indicates an expected call of ConstructDB.
func (mr *MockServiceMockRecorder) ConstructDB(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructDB", reflect.TypeOf((*MockService)(nil).ConstructDB), database)
}

// ConstructDrive mocks base method.
func (m *MockService) ConstructDrive() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructDrive")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConstructDrive indicates an expected call of ConstructDrive.
func (mr *MockServiceMockRecorder) ConstructDrive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructDrive", reflect.TypeOf((*MockService)(nil).ConstructDrive))
}

// DestructDB mocks base method.
func (m *MockService) DestructDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestructDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// DestructDB indicates an expected call of DestructDB.
func (mr *MockServiceMockRecorder) DestructDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestructDB", reflect.TypeOf((*MockService)(nil).DestructDB))
}

// NewBlog mocks base method.
func (m *MockService) NewBlog(blog *data.Blog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlog", blog)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewBlog indicates an expected call of NewBlog.
func (mr *MockServiceMockRecorder) NewBlog(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlog", reflect.TypeOf((*MockService)(nil).NewBlog), blog)
}

// Profile mocks base method.
func (m *MockService) Profile() (*data.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile")
	ret0, _ := ret[0].(*data.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockServiceMockRecorder) Profile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockService)(nil).Profile))
}

// ProfileToProfileDetail mocks base method.
func (m *MockService) ProfileToProfileDetail(profile *data.Profile) *blogprofile.ProfileDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfileToProfileDetail", profile)
	ret0, _ := ret[0].(*blogprofile.ProfileDetail)
	return ret0
}

// ProfileToProfileDetail indicates an expected call of ProfileToProfileDetail.
func (mr *MockServiceMockRecorder) ProfileToProfileDetail(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileToProfileDetail", reflect.TypeOf((*MockService)(nil).ProfileToProfileDetail), profile)
}

// UpdateBlog mocks base method.
func (m *MockService) UpdateBlog(blog *data.Blog, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", blog, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockServiceMockRecorder) UpdateBlog(blog, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockService)(nil).UpdateBlog), blog, id)
}

// ZipToHtml mocks base method.
func (m *MockService) ZipToHtml(r *http.Response) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZipToHtml", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZipToHtml indicates an expected call of ZipToHtml.
func (mr *MockServiceMockRecorder) ZipToHtml(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZipToHtml", reflect.TypeOf((*MockService)(nil).ZipToHtml), r)
}
